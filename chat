#! /opt/homebrew/bin/python3

import sys, os, json, shutil
import openai


FILE_PATH = os.path.expanduser("~/.chat")
TERMINAL_WIDTH = shutil.get_terminal_size().columns
MODEL = "gpt-3.5-turbo"

content = sys.argv[-1]
length = 2 # Default; May be overwritten
messages = []

if len(sys.argv) == 1 or len(sys.argv) > 4:
    print('chat "Explain how pi is calculated."')
    print('chat "Explain the following code: $(cat index.js)"')
    print('chat "$(cat << EOF \n Explain the difference between \' and " in javascript. \n EOF \n )"')
    sys.exit(1)

def checkMessages(messages):
    for message in messages:
        assert(message["role"] == "user" or message["role"] == "assistant")
        assert("content" in message)

try:
    with open(FILE_PATH, "r") as file:
        history = json.load(file)

        length = int(history["length"])
        if length < 0:
            length = 0

        checkMessages(history["messages"])
        messages = history["messages"]
except (IOError, json.decoder.JSONDecodeError, AttributeError, KeyError, ValueError, AssertionError):
    pass

if sys.argv[1] == "-h":
    try:
        length = int(sys.argv[2])
        if length < 0:
            length = 0
    except ValueError:
        print("Error: You must provide an integer after the -h option.")
        sys.exit(1)

if len(sys.argv) != 3: # Length option, no prompt
    messages = [] if length == 0 else messages[length * -2:]

    messages.append({"role": "user", "content": content})
    completion = openai.ChatCompletion.create(
        model=MODEL,
        messages=messages
    )["choices"][0]["message"]["content"]
    messages.append({"role": "assistant", "content": completion})

    print("*" * TERMINAL_WIDTH)
    print(completion)
    print("*" * TERMINAL_WIDTH)

with open(FILE_PATH, "w") as file:
    history = {
        "length": length,
        "messages": messages
    }
    json.dump(history, file)
